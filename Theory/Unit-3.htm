<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 12 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-right:0cm;
	margin-left:0cm;
	font-size:13.5pt;
	font-family:"Times New Roman","serif";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p
	{margin-right:0cm;
	margin-left:0cm;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
code
	{font-family:"Courier New";}
pre
	{mso-style-link:"HTML Preformatted Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:36.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:36.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
span.vkekvd
	{mso-style-name:vkekvd;}
span.t286pc
	{mso-style-name:t286pc;}
span.mtejhd
	{mso-style-name:mtejhd;}
span.a1srnd
	{mso-style-name:a1srnd;}
span.hzaysd
	{mso-style-name:hzaysd;}
span.lqfa5
	{mso-style-name:lqfa5;}
span.r0r5r
	{mso-style-name:r0r5r;}
span.zjr8l
	{mso-style-name:zjr8l;}
span.wwdjyf
	{mso-style-name:wwdjyf;}
span.HTMLPreformattedChar
	{mso-style-name:"HTML Preformatted Char";
	mso-style-link:"HTML Preformatted";
	font-family:"Courier New";}
span.undefined
	{mso-style-name:undefined;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Times New Roman","serif";
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page Section1
	{size:612.0pt 792.0pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=Section1>

<p class=MsoNormal><b><u><span style='font-size:14.0pt;line-height:115%;
color:black'>First Order Predicate Logic (FOL):</span></u></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>First-Order Predicate Logic (FOL), also known as Predicate Logic,
is a formal language used in mathematics, philosophy, linguistics, and computer
science. As an extension of propositional logic, it allows for a more expressive
representation of knowledge by introducing variables, predicates, and
quantifiers to represent objects, properties, and relationships.</span></p>

<p class=MsoNormal><b><u><span style='font-size:14.0pt;line-height:115%;
color:black'><span style='text-decoration:none'>&nbsp;</span></span></u></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><u><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Components:</span></u></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>The formal language of FOL is built from several key
components:&nbsp;</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Constants:</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> Symbols
     representing specific objects in the domain of discourse. For example: </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>John</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>, </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>Mary</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>, </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>3</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>, </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>India</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Variables:</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> Symbols
     that represent unspecified objects. They are typically denoted by
     lowercase letters such as </span><span style='font-size:12.0pt;font-family:
     "Cambria Math","serif"'>&#119909;, &#119910;</span><span style='font-size:
     12.0pt;font-family:"Times New Roman","serif"'> and </span><span
     style='font-size:12.0pt;font-family:"Cambria Math","serif"'>&#119911;.</span></li>
</ul>

<p class=MsoListParagraph style='text-indent:-18.0pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Predicates:</span></b><span style='font-size:12.0pt;font-family:
"Times New Roman","serif";color:black'> Symbols that represent properties or
relationships between objects. They evaluate to either true or false. For
example, </span><span style='font-size:10.0pt;font-family:"Courier New";
color:black'>Father(John, Robert)</span><span style='font-size:12.0pt;
font-family:"Times New Roman","serif";color:black'> means &quot;John is the
father of Robert&quot;.</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Functions:</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> Symbols
     that map one or more objects to another object. For example, </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>MotherOf(x)</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> could
     refer to the mother of </span><span style='font-size:12.0pt;font-family:
     "Cambria Math","serif"'>&#119909;.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Connectives:</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> Logical
     operators from propositional logic used to combine atomic sentences into
     complex ones. These include:</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Negation
      (¬)</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>:
      NOT</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Conjunction
      (</span></b><b><span style='font-size:12.0pt;font-family:"Cambria Math","serif"'>&#8743;</span></b><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>)</span></b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: AND</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Disjunction
      (</span></b><b><span style='font-size:12.0pt;font-family:"Cambria Math","serif"'>&#8744;</span></b><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>)</span></b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: OR</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Implication
      (&#8594;)</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>:
      IF...THEN...</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Biconditional
      (&#8596;)</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>:
      IF AND ONLY IF</span></li>
 </ul>
</ul>

<p class=MsoListParagraphCxSpFirst style='text-indent:-18.0pt;line-height:normal'><span
style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Quantifiers:</span></b><span style='font-size:12.0pt;font-family:
"Times New Roman","serif";color:black'> Symbols that indicate the scope or
quantity of a variable. The two main types are:</span></p>

<p class=MsoListParagraphCxSpMiddle style='line-height:normal'><b><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></b></p>

<p class=MsoListParagraphCxSpMiddle style='line-height:normal'><b><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>Universal
Quantifier (</span></b><b><span style='font-size:12.0pt;font-family:"Cambria Math","serif";
color:black'>&#8704;</span></b><b><span style='font-size:12.0pt;font-family:
"Times New Roman","serif";color:black'>):</span></b><span style='font-size:
12.0pt;font-family:"Times New Roman","serif";color:black'> Represents &quot;for
all&quot; or &quot;for every&quot; and applies a predicate to every element in
a domain.</span></p>

<p class=MsoListParagraphCxSpMiddle style='line-height:normal'><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'> For
example:</span></p>

<p class=MsoListParagraphCxSpLast style='line-height:normal'><span
style='font-size:12.0pt;font-family:"Cambria Math","serif";color:black'>&#8704;&#119909;</span><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>
(Animal(x)&#8594;Mortal(x)) means &quot;all animals are mortal&quot;.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:12.0pt;
font-family:"Times New Roman","serif";color:black'>           Existential
Quantifier (</span></b><b><span style='font-size:12.0pt;font-family:"Cambria Math","serif";
color:black'>&#8707;</span></b><b><span style='font-size:12.0pt;font-family:
"Times New Roman","serif";color:black'>):</span></b><span style='font-size:
12.0pt;font-family:"Times New Roman","serif";color:black'> Represents
&quot;there exists&quot; or &quot;for some&quot; and states that at least one
element in the domain satisfies a predicate. </span></p>

<p class=MsoNormal style='text-indent:36.0pt;line-height:normal'><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>For
example, </span></p>

<p class=MsoNormal style='text-indent:36.0pt;line-height:normal'><span
style='font-size:12.0pt;font-family:"Cambria Math","serif";color:black'>&#8707;&#119909;</span><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>
(Student(x)</span><span style='font-size:12.0pt;font-family:"Cambria Math","serif";
color:black'>&#8743;</span><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Likes(x, IceCream)) means &quot;at least one student likes ice
cream&quot;.&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><u><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Sentences&nbsp;</span></u></b></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Atomic
     sentences:</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>
     The simplest form of statement, consisting of a predicate applied to one
     or more terms (constants, variables, or functions). For instance, </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>Likes(Alice, Bob)</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> or </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>GreaterThan(5, 3)</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>.</span></li>
</ul>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Complex
     sentences:</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>
     Formed by combining atomic sentences with logical connectives. For
     example, </span><span style='font-size:10.0pt;font-family:"Courier New"'>(Likes(Alice,
     IceCream) </span><span style='font-size:10.0pt;font-family:"Cambria Math","serif"'>&#8743;</span><span
     style='font-size:10.0pt'> Likes(Alice, Cake)</span><span style='font-size:
     10.0pt;font-family:"Courier New"'>)</span><span style='font-size:12.0pt;
     font-family:"Times New Roman","serif"'> means &quot;Alice likes both ice
     cream and cake&quot;.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Free and
     bound variables:</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>
     A variable in a formula is bound if it falls under the scope of a
     quantifier. Otherwise, it is a free variable. A sentence with no free
     variables is a first-order sentence, which has a well-defined truth value
     under a given interpretation.&nbsp;</span></li>
</ul>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Advantages over propositional logic&nbsp;</span></b></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Increased
     expressiveness:</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>
     FOL can represent complex relationships, properties, and generalizations,
     unlike propositional logic, which is limited to simple true/false
     statements.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Automated
     reasoning:</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>
     FOL's formal structure allows machines to perform logical inference, which
     is a key part of artificial intelligence and automated theorem proving.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Flexibility:</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> It can be
     used across many domains, including natural language processing, database
     systems, and expert systems.&nbsp;</span></li>
</ul>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Example of FOL translation&nbsp;</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Consider the English sentence, &quot;All persons are
mortal.&quot;&nbsp;</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Predicate:</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>Person(x)</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> and </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>Mortal(x)</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Variable:</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>x</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Quantifier:</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> Universal
     (</span><span style='font-size:12.0pt;font-family:"Cambria Math","serif"'>&#8704;</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>)</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Connective:</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>
     Implication (&#8594;)&nbsp;</span></li>
</ul>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>The FOL representation is: </span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;
margin-left:144.0pt;margin-bottom:.0001pt;text-indent:36.0pt;line-height:normal'><span
style='font-size:12.0pt;font-family:"Cambria Math","serif";color:black'>&#8704;</span><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>(Person(x)&#8594;Mortal(x))</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>.&nbsp; </span></p>

<p class=MsoNormal><b><u><span style='font-size:14.0pt;line-height:115%;
color:black'><span style='text-decoration:none'>&nbsp;</span></span></u></b></p>

<p class=MsoNormal><span class=wwdjyf><b><u><span style='font-size:14.0pt;
line-height:115%;color:black'>Prolog Programming:</span></u></b></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>Prolog,
which stands for <b>PRO</b>gramming in <b>LOG</b>ic, is a declarative
programming language, meaning that a programmer defines the logic and facts of
a problem, and the Prolog engine uses that information to find a solution. This
differs significantly from imperative languages like C++ or Python, where the
programmer specifies the step-by-step instructions for how to solve a problem.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>At
its core, a Prolog program consists of a knowledge base of facts and rules that
define relationships between objects. The program is executed by posing a
query, and the Prolog engine attempts to satisfy that goal through logical
inference and a built-in search mechanism called <b>backtracking</b>.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Key concepts:</span></b></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Terms</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: The
     single data type in Prolog, which can be an atom, a variable, a number, or
     a compound term.</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Atoms</span></b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: Symbol
      names that begin with a lowercase letter or are enclosed in single
      quotes. Example: </span><span style='font-size:10.0pt;font-family:"Courier New"'>john</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>, </span><span
      style='font-size:10.0pt;font-family:"Courier New"'>likes(mary, food)</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>.</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Variables</span></b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>:
      Placeholders for terms, beginning with an uppercase letter or an
      underscore. Example: </span><span style='font-size:10.0pt;font-family:
      "Courier New"'>X</span><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>,
      </span><span style='font-size:10.0pt;font-family:"Courier New"'>Person</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>, </span><span
      style='font-size:10.0pt;font-family:"Courier New"'>_</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>.</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Numbers</span></b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: Integers
      and floats.</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Compound
      Terms</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>:
      A functor (an atom) followed by a list of arguments (terms) in
      parentheses. Example: </span><span style='font-size:10.0pt;font-family:
      "Courier New"'>mother(mary, john)</span><span style='font-size:12.0pt;
      font-family:"Times New Roman","serif"'>.</span></li>
 </ul>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Facts</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>:
     Unconditional truths that form the knowledge base. A fact is simply a
     predicate followed by a period.</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><span
      style='font-size:10.0pt;font-family:"Courier New"'>parent(john, mary).</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><span
      style='font-size:10.0pt;font-family:"Courier New"'>male(john).</span></li>
 </ul>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Rules</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: Logical
     statements that define a relationship based on certain conditions. A rule
     has a head (the conclusion) and a body (the conditions), connected by </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>:-</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>. A rule
     reads as &quot;The head is true if the body is true.&quot;</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><span
      style='font-size:10.0pt;font-family:"Courier New"'>grandparent(X, Z) :-
      parent(X, Y), parent(Y, Z).</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>This rule
      states: </span><span style='font-size:10.0pt;font-family:"Courier New"'>X</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> is a
      grandparent of </span><span style='font-size:10.0pt;font-family:"Courier New"'>Z</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> if </span><span
      style='font-size:10.0pt;font-family:"Courier New"'>X</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> is a
      parent of </span><span style='font-size:10.0pt;font-family:"Courier New"'>Y</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> AND </span><span
      style='font-size:10.0pt;font-family:"Courier New"'>Y</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> is a
      parent of </span><span style='font-size:10.0pt;font-family:"Courier New"'>Z</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>.</span></li>
 </ul>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Queries</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: How a
     user interacts with a Prolog program to retrieve information. A query is a
     goal that the Prolog system attempts to prove. It is written with a </span><span
     style='font-size:10.0pt;font-family:"Courier New"'>?-</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> at the
     console.</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><span
      style='font-size:10.0pt;font-family:"Courier New"'>?- grandparent(X,
      mary).</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>This query
      asks, &quot;Who is a grandparent of Mary?&quot; The Prolog engine
      searches its knowledge base for facts and rules to satisfy this goal.</span></li>
 </ul>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Unification</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: A
     pattern-matching process that Prolog uses to determine if two terms can be
     made identical by assigning values to variables.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Backtracking</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: The
     engine's automatic search process. If a goal fails to find a solution,
     Prolog will backtrack and try a different path or alternative rule to
     satisfy it.&nbsp;</span></li>
</ul>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Example: A family knowledge base</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>&nbsp;</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>This example demonstrates Prolog's declarative approach to
defining and querying a logical system.&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>prolog</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>%
Facts: The basic relationships</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>parent(pam,
bob).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>parent(tom,
bob).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>parent(tom,
liz).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>parent(bob,
ann).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>parent(bob,
pat).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>parent(pat,
jim).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>male(tom).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>male(bob).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>male(jim).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>female(pam).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>female(liz).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>female(ann).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>female(pat).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>%
Rules: Defining more complex relationships</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>father(X,
Y) :- parent(X, Y), male(X).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>mother(X,
Y) :- parent(X, Y), female(X).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>grandparent(X,
Z) :- parent(X, Y), parent(Y, Z).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:10.0pt;font-family:"Courier New";color:black'>sibling(X,
Y) :- parent(Z, X), parent(Z, Y), X \= Y.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Sample queries</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>&nbsp;</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Using an interactive Prolog interpreter like SWI-Prolog, you can
pose queries to this program:</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><span
     style='font-size:10.0pt;font-family:"Courier New"'>?- father(bob, ann).</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Result:</span></b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> </span><span
      style='font-size:10.0pt;font-family:"Courier New"'>true.</span></li>
 </ul>
 <li class=MsoNormal style='color:black;line-height:normal'><span
     style='font-size:10.0pt;font-family:"Courier New"'>?- father(tom, X).</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Result:</span></b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> </span><span
      style='font-size:10.0pt;font-family:"Courier New"'>X = bob ; X = liz.</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> (The
      semicolon requests the next solution).</span></li>
 </ul>
 <li class=MsoNormal style='color:black;line-height:normal'><span
     style='font-size:10.0pt;font-family:"Courier New"'>?- grandparent(tom,
     ann).</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Result:</span></b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> </span><span
      style='font-size:10.0pt;font-family:"Courier New"'>true.</span></li>
 </ul>
 <li class=MsoNormal style='color:black;line-height:normal'><span
     style='font-size:10.0pt;font-family:"Courier New"'>?- sibling(liz, bob).</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Result:</span></b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> </span><span
      style='font-size:10.0pt;font-family:"Courier New"'>true.</span></li>
 </ul>
 <li class=MsoNormal style='color:black;line-height:normal'><span
     style='font-size:10.0pt;font-family:"Courier New"'>?- grandparent(pam, X).</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Result:</span></b><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'> </span><span
      style='font-size:10.0pt;font-family:"Courier New"'>X = ann ; X = pat.</span><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>&nbsp;</span></li>
 </ul>
</ul>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>Applications:</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
color:black'>&nbsp;</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>Prolog's
strengths in logical reasoning and symbolic manipulation make it well-suited
for a number of applications, including:&nbsp;</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;text-align:justify;text-justify:inter-ideograph;
     line-height:normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Artificial
     Intelligence and Expert Systems</span></b><span style='font-size:12.0pt;
     font-family:"Times New Roman","serif"'>: Creating systems that simulate
     human decision-making and reasoning. For example, a medical diagnosis system
     can use facts (symptoms) and rules (conditions) to suggest a diagnosis.</span></li>
 <li class=MsoNormal style='color:black;text-align:justify;text-justify:inter-ideograph;
     line-height:normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Natural
     Language Processing (NLP)</span></b><span style='font-size:12.0pt;
     font-family:"Times New Roman","serif"'>: Parsing and understanding human
     language due to its strong pattern-matching capabilities.</span></li>
 <li class=MsoNormal style='color:black;text-align:justify;text-justify:inter-ideograph;
     line-height:normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Automated
     Theorem Proving</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>:
     Proving the validity of mathematical theorems.</span></li>
 <li class=MsoNormal style='color:black;text-align:justify;text-justify:inter-ideograph;
     line-height:normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Database
     Querying</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>:
     Serving as a powerful query language for deductive databases.</span></li>
 <li class=MsoNormal style='color:black;text-align:justify;text-justify:inter-ideograph;
     line-height:normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Robotics</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: Planning
     the sequence of steps for a robot to achieve a goal.</span></li>
 <li class=MsoNormal style='color:black;text-align:justify;text-justify:inter-ideograph;
     line-height:normal'><b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Constraint
     Logic Programming</span></b><span style='font-size:12.0pt;font-family:
     "Times New Roman","serif"'>: Solving scheduling, planning, and other optimization
     problems.&nbsp;</span></li>
</ul>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><b><u><span
style='font-size:14.0pt;color:black'>Unification in Prolog:</span></u></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><strong><span
style='font-family:"Calibri","sans-serif";color:black'>Unification</span></strong><span
style='color:black'> in <strong data-start=19 data-end=29><span
style='font-family:"Calibri","sans-serif"'>Prolog</span></strong> is a core
concept used in matching terms (like variables, constants, and structures)
during resolution and pattern matching.</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman","serif";color:black'>Unification is the process
of making two Prolog terms <i>equal</i> by finding suitable substitutions for
variables.</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>It's a <b>bidirectional
     matching</b>: </span><span style='font-size:10.0pt;font-family:"Courier New"'>X
     = 3</span><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>
     means &quot;Can I make </span><span style='font-size:10.0pt;font-family:
     "Courier New"'>X</span><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>
     and </span><span style='font-size:10.0pt;font-family:"Courier New"'>3</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>
     equal?&quot;  yes, by setting </span><span style='font-size:10.0pt;
     font-family:"Courier New"'>X = 3</span><span style='font-size:12.0pt;
     font-family:"Times New Roman","serif"'>.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Prolog uses
     unification when:</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:black;line-height:normal'><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Matching
      goals with rules.</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Matching
      rule heads with facts.</span></li>
  <li class=MsoNormal style='color:black;line-height:normal'><span
      style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Matching
      arguments in predicates.</span></li>
 </ul>
</ul>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman","serif";color:black'>Basic Examples</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>?- X
= 5.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>X =
5.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>?- X
= Y.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>X =
Y.      % Both are unbound variables, so they stay linked.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>?-
likes(mary, X) = likes(mary, pizza).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>X =
pizza.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>?-
likes(mary, X) = likes(john, pizza).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>false.     
% Cannot unify: mary &#8800; john</span></p>

<h3><span style='color:black'>Unifying Compound Terms</span></h3>

<p data-start=853 data-end=877><span style='color:black'>Compound terms unify
if:</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=880 data-end=918><span
style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>They have the same <strong
data-start=899 data-end=910>functor</strong> (name).</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=921 data-end=972><span
style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>They have the same <strong
data-start=940 data-end=949>arity</strong> (number of arguments).</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=975 data-end=1018><span
style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Each corresponding argument can be
unified.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>?-
f(a, X) = f(a, b).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>X =
b.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>?-
f(a, X) = g(a, X).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>false. 
% f &#8800; g &#8594; cannot unify</span></p>

<h3><span style='color:black'>Occurs Check</span></h3>

<p data-start=1144 data-end=1319><span style='color:black'>Prolog <em
data-start=1151 data-end=1162>typically</em> does <strong data-start=1168
data-end=1175>not</strong> perform the <strong data-start=1188 data-end=1204>occurs
check</strong> (i.e., to prevent a variable from being unified with a term that
contains itself), leading to infinite structures.</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>?- X
= f(X).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>X =
f(X).   % Allowed, but creates a cyclic term</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman","serif";color:black'>ome implementations allow
enabling the occurs check for safety.</span></p>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman","serif";color:black'>Uses of Unification in
Prolog</span></b></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Pattern
     matching</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>:
     Selecting the correct clause or rule.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Variable
     binding</span></b><span style='font-size:12.0pt;font-family:"Times New Roman","serif"'>:
     Assigning values during goal evaluation.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Backtracking</span></b><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>: Trying
     alternative matches if one fails.</span></li>
</ul>

<p class=MsoNormal style='line-height:normal'><b><span style='font-size:13.5pt;
font-family:"Times New Roman","serif";color:black'>Unification vs Assignment</span></b></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:12.0pt;
font-family:"Times New Roman","serif";color:black'>In Prolog:</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:black;line-height:normal'><span
     style='font-size:10.0pt;font-family:"Courier New"'>=</span><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'> is <b>unification</b>,
     not assignment.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>There is no
     &quot;assignment&quot; in the traditional programming sense.</span></li>
 <li class=MsoNormal style='color:black;line-height:normal'><span
     style='font-size:12.0pt;font-family:"Times New Roman","serif"'>Variables
     are bound once and cannot be changed afterward (no reassignment).</span></li>
</ul>

<p class=MsoNormal style='line-height:normal'><b><u><span style='font-size:
14.0pt;font-family:"Times New Roman","serif";color:black'>Forward Chaining in
Prolog:</span></u></b></p>

<p class=MsoNormal style='line-height:normal'><span style='color:black'>Prolog
is <strong data-start=10 data-end=47><span style='font-family:"Calibri","sans-serif"'>not
inherently a forward chaining</span></strong> system  it primarily uses <strong
data-start=75 data-end=96><span style='font-family:"Calibri","sans-serif"'>backward
chaining</span></strong> to resolve goals. However, it's still possible to <strong
data-start=147 data-end=176><span style='font-family:"Calibri","sans-serif"'>simulate
forward chaining</span></strong> in Prolog through specific programming
techniques.</span></p>

<h2><span style='color:black'>What is Forward Chaining?</span></h2>

<p data-start=289 data-end=346><strong data-start=289 data-end=309><span
style='color:black'>Forward chaining</span></strong><span style='color:black'>
is a <em data-start=315 data-end=328>data-driven</em> reasoning method:</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=351 data-end=378><span
style='color:black'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Start with <strong data-start=362
data-end=377>known facts</strong>.</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=382 data-end=417><span
style='color:black'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Apply <strong data-start=388
data-end=397>rules</strong> to infer new facts.</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=421 data-end=486><span
style='color:black'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Repeat until no more inferences can be
made or a goal is reached.</span></p>

<p data-start=488 data-end=563><span style='color:black'>Common in <strong
data-start=498 data-end=520>production systems</strong> and <strong
data-start=525 data-end=543>expert systems</strong> (like CLIPS, Jess).</span></p>

<h2><span style='color:black'>Prolog: Backward vs. Forward Chaining</span></h2>

<table class=MsoNormalTable border=0 cellpadding=0 data-start=615
 data-end=1129>
 <thead data-start=615 data-end=716>
  <tr data-start=615 data-end=716>
   <td style='padding:.75pt .75pt .75pt .75pt'>
   <p class=MsoNormal align=center style='text-align:center'><b><span
   style='color:black'>Feature</span></b></p>
   </td>
   <td style='padding:.75pt .75pt .75pt .75pt'>
   <p class=MsoNormal align=center style='text-align:center'><b><span
   style='color:black'>Backward Chaining (Prolog default)</span></b></p>
   </td>
   <td style='padding:.75pt .75pt .75pt .75pt'>
   <p class=MsoNormal align=center style='text-align:center'><b><span
   style='color:black'>Forward Chaining (simulated)</span></b></p>
   </td>
  </tr>
 </thead>
 <tr data-start=821 data-end=923>
  <td style='padding:.75pt .75pt .75pt .75pt' data-start=821 data-end=846
  data-col-size=sm>
  <p class=MsoNormal><span style='color:black'>Triggered by</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt' data-start=846 data-end=884
  data-col-size=sm>
  <p class=MsoNormal><span style='color:black'>A <strong data-start=850
  data-end=864><span style='font-family:"Calibri","sans-serif"'>query/goal</span></strong></span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt' data-start=884 data-end=923
  data-col-size=sm>
  <p class=MsoNormal><strong data-start=886 data-end=901><span
  style='font-family:"Calibri","sans-serif";color:black'>Known facts</span></strong></p>
  </td>
 </tr>
 <tr data-start=924 data-end=1026>
  <td style='padding:.75pt .75pt .75pt .75pt' data-start=924 data-end=949
  data-col-size=sm>
  <p class=MsoNormal><span style='color:black'>Reasoning direction</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt' data-start=949 data-end=987
  data-col-size=sm>
  <p class=MsoNormal><span style='color:black'>Goal &#8594; Facts</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt' data-start=987 data-end=1026
  data-col-size=sm>
  <p class=MsoNormal><span style='color:black'>Facts &#8594; New facts/goals</span></p>
  </td>
 </tr>
 <tr data-start=1027 data-end=1129>
  <td style='padding:.75pt .75pt .75pt .75pt' data-start=1027 data-end=1052
  data-col-size=sm>
  <p class=MsoNormal><span style='color:black'>Built-in in Prolog?</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt' data-start=1052 data-end=1090
  data-col-size=sm>
  <p class=MsoNormal><span style='font-family:"Times New Roman","serif";
  color:black'>&#9989; Ye</span><span style='color:black'>s</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt' data-start=1090 data-end=1129
  data-col-size=sm>
  <p class=MsoNormal><span style='font-family:"Times New Roman","serif";
  color:black'>&#10060; No (must be implemented manually</span><span
  style='color:black'>)</span></p>
  </td>
 </tr>
</table>

<h2><span style='color:black'>Simulating Forward Chaining in Prolog</span></h2>

<h3 data-start=1181 data-end=1203><span style='color:black'>Step-by-step idea:</span></h3>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1207
data-end=1245><span style='color:black'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Start with a set of <strong
data-start=1227 data-end=1244>initial facts</strong>.</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1249
data-end=1285><span style='color:black'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Define <strong data-start=1256
data-end=1265>rules</strong> to infer new facts.</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1289
data-end=1365><span style='color:black'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Use a loop (via recursion or built-in
predicates) to apply rules repeatedly.</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1369
data-end=1402><span style='color:black'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Stop when no new facts are added.</span></p>

<h2><span style='color:black'>Simple Example</span></h2>

<h3 data-start=1430 data-end=1467><span style='color:black'>Knowledge Base
(facts + rules)</span></h3>

<p class=MsoNormal style='line-height:normal'><span style='font-size:14.0pt;
font-family:"Times New Roman","serif";color:black'>% Initial facts</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:14.0pt;
font-family:"Times New Roman","serif";color:black'>fact(a).</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:14.0pt;
font-family:"Times New Roman","serif";color:black'>fact(b).</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:14.0pt;
font-family:"Times New Roman","serif";color:black'>% Rules: if a and b, then c</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:14.0pt;
font-family:"Times New Roman","serif";color:black'>rule(c) :- fact(a), fact(b),
\+ fact(c).</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:14.0pt;
font-family:"Times New Roman","serif";color:black'>% if c, then d</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:14.0pt;
font-family:"Times New Roman","serif";color:black'>rule(d) :- fact(c), \+
fact(d).</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:14.0pt;
font-family:"Times New Roman","serif";color:black'>% if d, then e</span></p>

<p class=MsoNormal style='line-height:normal'><span style='font-size:14.0pt;
font-family:"Times New Roman","serif";color:black'>rule(e) :- fact(d), \+
fact(e).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><b><span
style='font-size:12.0pt;font-family:"Times New Roman","serif";color:black'>Forward
Chaining Engine</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>forward
:-</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>   
rule(NewFact),           % Can a rule infer a new fact?</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>   
assertz(fact(NewFact)),  % Add it to the knowledge base</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>   
write('Inferred: '), write(NewFact), nl,</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>   
forward.                 % Repeat</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>forward. 
% Stop when no more new facts</span></p>

<h2><span style='color:black'>Tools That Use Forward Chaining</span></h2>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=2391
data-end=2473><span style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><strong data-start=2391 data-end=2400><span style='color:black'>CLIPS</span></strong><span
style='color:black'>, <strong data-start=2402 data-end=2410>Jess</strong>, <strong
data-start=2412 data-end=2422>Drools</strong>  logic rule engines with native
forward chaining.</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=2476
data-end=2549><span style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><strong data-start=2476 data-end=2507><span style='color:black'>Prolog-based
expert systems</span></strong><span style='color:black'> often simulate forward
chaining this way.</span></p>

<p><b><u><span style='font-size:14.0pt;color:black'>Backword Chaining in Prolog:</span></u></b></p>

<p><strong><span style='color:black'>Backward chaining</span></strong><span
style='color:black'> is the <strong data-start=65 data-end=92>core reasoning
strategy</strong> built into Prolog. It's <strong data-start=117 data-end=132>goal-driven</strong>:
Prolog starts with a goal and works backward to determine if it can be proven
from known facts and rules.</span></p>

<h2><span style='color:black'>What is Backward Chaining?</span></h2>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=282 data-end=312><span
style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>You <strong data-start=286
data-end=304>ask a question</strong> (goal).</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=315 data-end=380><span
style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Prolog searches for <strong
data-start=335 data-end=353>rules or facts</strong> that can satisfy the goal.</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=383 data-end=459><span
style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>If the goal depends on sub-goals,
Prolog recursively tries to satisfy those.</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=462 data-end=483><span
style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>This continues until:</span></p>

<p style='margin-left:72.0pt;text-indent:-18.0pt' data-start=488 data-end=519><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='color:black'>The goal is <strong data-start=500 data-end=515>proven true</strong>,
or</span></p>

<p style='margin-left:72.0pt;text-indent:-18.0pt' data-start=524 data-end=560><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='color:black'>No more rules/facts apply &#8594; <strong data-start=552
data-end=560>fail</strong></span></p>

<h2><span style='color:black'>Prolog Does This Automatically</span></h2>

<p data-start=605 data-end=632><span style='color:black'>When you type a query
like:</span></p>

<p><span style='font-size:14.0pt;color:black'>?- likes(mary, pizza).</span></p>

<p><span style='color:black'>Prolog tries to <strong data-start=688
data-end=697>prove</strong> this using facts and rules by backward chaining.</span></p>

<h2><span style='color:black'>Example</span></h2>

<h3 data-start=767 data-end=789><span style='color:black'>Knowledge Base:</span></h3>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>%
Facts</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>likes(mary,
pizza).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>likes(john,
pasta).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>%
Rule</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>likes(john,
X) :- italian(X).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>italian(pasta).</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:12.0pt;color:black'>Query:</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>?-
likes(john, pasta).</span></p>

<p><strong><span style='color:black'>Prolog reasoning</span></strong><span
style='color:black'> (backward chaining):</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1007
data-end=1033><span style='color:black'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Goal: </span><code data-start=1013
data-end=1033><span style='font-size:10.0pt;color:black'>likes(john, pasta)</span></code></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1037
data-end=1081><span style='color:black'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Rule matches: </span><code
data-start=1051 data-end=1081><span style='font-size:10.0pt;color:black'>likes(john,
X) :- italian(X)</span></code></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1085
data-end=1120><span style='color:black'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Now it must prove: </span><code
data-start=1104 data-end=1120><span style='font-size:10.0pt;color:black'>italian(pasta)</span></code></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1124
data-end=1153><span style='color:black'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:black'>Found as a fact &#8594; <strong
data-start=1142 data-end=1153>success</strong></span></p>

<p data-start=1155 data-end=1166><strong data-start=1155 data-end=1166><span
style='color:black'>Result:</span></strong></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>true.</span></p>

<h2><span style='color:black'>How It Works Under the Hood</span></h2>

<p data-start=1228 data-end=1260><span style='color:black'>Prologs backward
chaining uses:</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1264
data-end=1312><span style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><strong data-start=1264 data-end=1279><span style='color:black'>Unification</span></strong><span
style='color:black'>: to match goals with facts/rules</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1315
data-end=1364><span style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><strong data-start=1315 data-end=1337><span style='color:black'>Depth-first
search</span></strong><span style='color:black'>: to explore possible paths</span></p>

<p style='margin-left:36.0pt;text-indent:-18.0pt' data-start=1367
data-end=1420><span style='font-size:10.0pt;font-family:Symbol;color:black'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><strong data-start=1367 data-end=1383><span style='color:black'>Backtracking</span></strong><span
style='color:black'>: to try alternatives if a path fails</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;text-align:
justify;text-justify:inter-ideograph;line-height:normal'><span
style='font-size:14.0pt;font-family:"Times New Roman","serif";color:black'>&nbsp;</span></p>

</div>

</body>

</html>
